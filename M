import matplotlib.pyplot as plt
from datetime import datetime

# Example data
notional = 1000000  # Notional of 1 million
fixed_rate = 0.02  # 2% fixed rate
euribor_rates = [0.015, 0.017, 0.018, 0.019]  # Provided Euribor rates

# Define accrual periods using semi-annual dates
start_dates = [
    datetime(2024, 1, 1),
    datetime(2024, 7, 1),
    datetime(2025, 1, 1),
    datetime(2025, 7, 1),
]
end_dates = [
    datetime(2024, 7, 1),
    datetime(2025, 1, 1),
    datetime(2025, 7, 1),
    datetime(2026, 1, 1),
]

# Function for calculating accrual periods based on Actual/360 convention
def day_count_actual_360(start_date, end_date):
    actual_days = (end_date - start_date).days
    return actual_days / 360.0

# Accrual fractions based on Actual/360 convention
accrual_fractions = [day_count_actual_360(sd, ed) for sd, ed in zip(start_dates, end_dates)]

# Function to bootstrap discount factors
def bootstrap_discount_factors(euribor_rates, accrual_fractions):
    discount_factors = [1.0]  # Start with DF(0) = 1
    for rate, accrual in zip(euribor_rates, accrual_fractions):
        df = discount_factors[-1] / (1 + rate * accrual)
        discount_factors.append(df)
    return discount_factors[1:]

# Function to calculate progressively adjusted MtM over time
def calculate_mtm_adjusted(notional, fixed_rate, euribor_rates, accrual_fractions, discount_factors):
    fixed_leg_cash_flows = [notional * fixed_rate * accrual for accrual in accrual_fractions]
    floating_leg_cash_flows = [notional * rate * accrual for rate, accrual in zip(euribor_rates, accrual_fractions)]
    
    mtm_values = []
    for i in range(len(accrual_fractions)):
        # Only discount the cash flows from the current period onward
        remaining_fixed_leg_cash_flows = fixed_leg_cash_flows[i:]
        remaining_floating_leg_cash_flows = floating_leg_cash_flows[i:]
        remaining_discount_factors = discount_factors[i:]
        
        discounted_fixed_leg = sum(cf * df for cf, df in zip(remaining_fixed_leg_cash_flows, remaining_discount_factors))
        discounted_floating_leg = sum(cf * df for cf, df in zip(remaining_floating_leg_cash_flows, remaining_discount_factors))
        
        # Calculate MtM (swap value at this point in time)
        mtm_value = discounted_floating_leg - discounted_fixed_leg
        mtm_values.append(mtm_value)
    
    return mtm_values

# Bootstrap discount factors
discount_factors = bootstrap_discount_factors(euribor_rates, accrual_fractions)

# Calculate adjusted MtM values over time
mtm_values_adjusted = calculate_mtm_adjusted(notional, fixed_rate, euribor_rates, accrual_fractions, discount_factors)

# Plotting the adjusted MtM values over time
time_points = end_dates  # Only using end_dates to match the length of mtm_values
plt.figure(figsize=(10, 6))
plt.plot(time_points, mtm_values_adjusted, marker='o', linestyle='-')
plt.title("Adjusted Mark-to-Market (MtM) Value of the Swap Over Time")
plt.xlabel("Time")
plt.ylabel("MtM Value")
plt.grid(True)
plt.show()
