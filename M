def calculate_mtm_swap_over_time(notional, fixed_rate, fixed_part, floating_part, fixed_dcf, floating_dcf, fixed_frq, floating_frq):
    # Determine the number of periods for fixed and floating legs based on the length of discount factor lists
    num_fixed_periods = len(fixed_part)  # Assuming fixed_part only contains discount factors for the fixed leg
    num_floating_periods = len(floating_part)  # Assuming floating_part contains discount factors and forward rates for the floating leg

    # Generate time points for each fixed payment
    fixed_time_points = [i / fixed_frq for i in range(num_fixed_periods)]

    # Prepare to store MtM values over time
    mtm_values = []

    # Calculate MtM at each fixed payment point
    for t in range(num_fixed_periods):
        # Get the remaining fixed and floating cash flows, discount factors, and day count fractions
        current_fixed_discount_factors = fixed_part[t:]  # Remaining discount factors for fixed leg
        current_fixed_dcf = fixed_dcf[t:]  # Remaining day count fractions for fixed leg
        current_floating_discount_factors = floating_part[t:]  # Remaining discount factors for floating leg
        current_floating_dcf = floating_dcf[t:]  # Remaining day count fractions for floating leg

        # Calculate fixed leg cash flows and present value
        fixed_cash_flows = [notional * fixed_rate * dcf for dcf in current_fixed_dcf]  # Apply day count fractions
        pv_fixed_leg = sum(cf * df for cf, df in zip(fixed_cash_flows, current_fixed_discount_factors))

        # Calculate floating leg cash flows and present value
        floating_cash_flows = [notional * rate * dcf for rate, dcf in zip(current_floating_discount_factors, current_floating_dcf)]
        pv_floating_leg = sum(cf * df for cf, df in zip(floating_cash_flows, current_floating_discount_factors))

        # Calculate MtM value and store it
        mtm_value = pv_fixed_leg - pv_floating_leg
        mtm_values.append(mtm_value)

    return fixed_time_points, mtm_values










xxx


import numpy as np

# Parameters (example)
notional = 1000000  # Notional amount
par_rate = 0.03  # Fixed rate
fixed_frequency = 2  # Semi-annual payments for fixed leg
floating_frequency = 4  # Quarterly payments for floating leg
discount_factors = [...]  # Discount factors for each cash flow time
forward_rates = [...]  # Forward rates for floating leg periods
fixed_dcf = [...]  # Day count fractions for fixed leg periods (e.g., 0.5 for semi-annual 30/360)
floating_dcf = [...]  # Day count fractions for floating leg periods
swap_duration = 5  # Swap duration in years

# Calculate Fixed Leg Cash Flows with Day Count Fraction
fixed_cash_flows = np.array([par_rate * notional * dcf for dcf in fixed_dcf])

# Calculate Floating Leg Cash Flows with Day Count Fraction
floating_cash_flows = np.array([forward_rate * notional * dcf for forward_rate, dcf in zip(forward_rates, floating_dcf)])

# Present Value of Fixed and Floating Legs
fixed_leg_pv = np.sum(fixed_cash_flows * np.array(discount_factors[:len(fixed_cash_flows)]))
floating_leg_pv = np.sum(floating_cash_flows * np.array(discount_factors[:len(floating_cash_flows)]))

# MTM Calculation
mtm_value = floating_leg_pv - fixed_leg_pv
print("Mark-to-Market (MTM) Value of the Swap:", mtm_value)











xxx

import numpy as np
import matplotlib.pyplot as plt

# Parameters
par_rate = 0.03  # Fixed rate (par rate)
discount_values_fixed = [0.98, 0.96, 0.94, 0.92, 0.90]  # Discount factors for fixed leg (semi-annual payments)
discount_values_floating = [0.98, 0.975, 0.97, 0.965, 0.96, 0.955, 0.95, 0.945, 0.94, 0.935]  # Floating leg (quarterly payments)
forward_rates = [0.025, 0.026, 0.027, 0.028, 0.029, 0.030, 0.031, 0.032, 0.033, 0.034]  # Forward rates for floating payments
fixed_freq = 2  # Fixed leg payment frequency per year (semi-annual)
floating_freq = 4  # Floating leg payment frequency per year (quarterly)
notional = 1000000  # Notional amount of the swap
swap_duration = 5  # Swap duration in years

# Cash flow times
fixed_times = np.arange(1 / fixed_freq, swap_duration + 1 / fixed_freq, 1 / fixed_freq)
floating_times = np.arange(1 / floating_freq, swap_duration + 1 / floating_freq, 1 / floating_freq)

# Fixed and Floating Leg Cash Flows
fixed_cash_flows = np.full(len(fixed_times), par_rate * notional / fixed_freq)
floating_cash_flows = np.array(forward_rates) * notional / floating_freq

# Present Values of Fixed and Floating Legs
fixed_leg_pv = np.sum(fixed_cash_flows * np.array(discount_values_fixed))
floating_leg_pv = np.sum(floating_cash_flows * np.array(discount_values_floating))

# MTM Calculation
mtm_value = floating_leg_pv - fixed_leg_pv
print("Mark-to-Market (MTM) Value of the Swap:", mtm_value)

# MTM Over Time Calculation
min_length = min(len(discount_values_fixed), len(discount_values_floating))
mtm_values_over_time = []
for i in range(min_length):
    floating_leg_pv_time = np.sum(floating_cash_flows[:i + 1] * np.array(discount_values_floating)[:i + 1])
    fixed_leg_pv_time = np.sum(fixed_cash_flows[:i + 1] * np.array(discount_values_fixed)[:i + 1])
    mtm_values_over_time.append(floating_leg_pv_time - fixed_leg_pv_time)

# Plot MTM values over time
plt.figure(figsize=(10, 6))
plt.plot(range(len(mtm_values_over_time)), mtm_values_over_time, marker='o')
plt.title("Mark-to-Market (MTM) Value of the Swap Over Time")
plt.xlabel("Time Periods")
plt.ylabel("MTM Value")
plt.grid(True)
plt.show()
